## ORACLE
/****** SEQUENZE ******/
# prossimo valore di una sequenza
SELECT GCM_SEQ_CAMP_CATEGORIA.NEXTVAL FROM DUAL

# Metadata delle sequenze per l'utente corrente
SELECT * FROM user_sequences;

# Metadata di tutte le sequenze
select * from all_sequences;

# Script per modificare sequenza partendo da tabella
-- Serve per loggare nella shell del renamDBMS
SET SERVEROUTPUT ON

DECLARE
  differenza INTEGER;
  sqlstmt varchar2(255);
  seqVal Number;
  
BEGIN
  -- [1] query default
  sqlstmt := 'ALTER SEQUENCE RCC_SEQ_RC_U_UTENTI_ID_USR INCREMENT BY ';
  
   -- [2] Recupero prossimo valore dalla seq 
  SELECT RCC_SEQ_RC_U_UTENTI_ID_USR.NEXTVAL INTO seqVal FROM DUAL;
  
  DBMS_OUTPUT.PUT_LINE('Sequenza: ' || seqVal);
  
  -- [3] calcolo differenza fra seq e max in tabella
  select (NVL(MAX(ID_USR), 0) - seqVal) + 1 into differenza from RC_U_UTENTI;
  
  DBMS_OUTPUT.PUT_LINE('Differenza: ' || differenza);
  
  if differenza <> 0 then
    execute immediate sqlstmt || differenza;
	-- [2] Devo richiamare il valore in mode da eseguire il nuovo increment
    SELECT RCC_SEQ_RC_U_UTENTI_ID_USR.NEXTVAL INTO seqVal FROM DUAL;
     DBMS_OUTPUT.PUT_LINE('Sequenza: ' || seqVal);
    execute immediate sqlstmt || 1;
  end if;

END;
/

/****** TABELLE ******/

# Aggiungere più colonne
ALTER TABLE QG_FONDO_CASSA_ELIMINATO
  ADD ( "COD_DIV" NUMBER(2,0) NOT NULL ENABLE, 
        "COD_CAN" NUMBER(2,0) NOT NULL ENABLE, 
        "COD_CENTRO" NUMBER(4,0) NOT NULL ENABLE);
		
# Aggiungere chiave esterna
ALTER TABLE QG_FONDO_CASSA_ELIMINATO
ADD CONSTRAINT FK_CENTRI_GEST
  FOREIGN KEY(COD_DIV, COD_CAN, COD_CENTRO)
  REFERENCES RC_CFG_CENTRI_GEST(COD_DIV, COD_CAN, COD_CENTRO);
  
# Cambiare nome a tabella
 RENAME QG_FONDO_CASSA_TRACCIATURA TO TRACCIATURA_OLD;
 
/****** COLONNE ******/ 
# Cambiare nome a colonna
alter table gcm_mail_tracciatura rename column dt_ins to dat_ins;

# modificare più colonne
ALTER TABLE RC_CLIENTI_MOVIMENTI MODIFY(
    ID_RC NUMBER NOT NULL, 
	NUM_RIG NUMBER(3,0) NOT NULL, 
	COD_MOV NUMBER(4,0) NOT NULL
)

# Aggiungere valore default a colonna
alter table cliente_auth modify reset_pwd default 0;

# impostare colonna not null
alter table articoli_dossier_reparto modify FLG_REFERENZA_OBB char(1 BYTE) not null;

# aggiungere commento a colonna
comment on column articoli_dossier_reparto.FLG_REFERENZA_OBB is '0 = FALSE, 1 =  TRUE';

# cambiare tipo colonna
alter table qg_fondo_cassa_eliminato modify emp_id number(8,0) ;

# Vincolo che almeno uno fra due campi debba essere compilato
ALTER TABLE RC_CLIENTI_MOVIMENTI ADD CONSTRAINT RC_CLI_MOV_CF_PI_NULL CHECK (CODICE_FISCALE IS NOT NULL OR PARTITA_IVA IS NOT NULL);

# Per cambiare ordine colonne (colum_id) devo ricreare la tabella (posso fare rename + crare una nuova tabella selezionando le colonne della vecchia nell'ordine che mi interessa) 
CREATE TABLE QG_FONDO_CASSA_TRACCIATURA AS SELECT ID, DT_INS, ID_USR, ID_QG, EMP_ID, OLD_VAL, NEW_VAL FROM TRACCIATURA_OLD;

# Versione db
SELECT * FROM V$VERSION;

SELECT version FROM V$INSTANCE;

BEGIN DBMS_OUTPUT.PUT_LINE(DBMS_DB_VERSION.VERSION || '.' || DBMS_DB_VERSION.RELEASE); END;

# Creare colonne identità (autoincrement) 
==> che si alimentano ad ogni inserimento (la colonna non ha necessità di essere inclusa nell'insert)
CREATE TABLE GCM_DESTINATARI_BRICOCENTER(ID NUMBER GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),...)
==> che si alimentano solo quando la colonna è null
CREATE TABLE t1 (c1 NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY, ...

CREATE UNIQUE INDEX "T_STRATEGIA_RULE_ID_STRATEGIA_RULE_IDX"
   ON "T_STRATEGIA_RULE"
   ("ID_STRATEGIA_RULE"       ASC);

ALTER TABLE "T_STRATEGIA_RULE" ADD CONSTRAINT "T_STRATEGIA_RULE_PK" PRIMARY KEY
   ("ID_STRATEGIA_RULE") USING INDEX "T_STRATEGIA_RULE_ID_STRATEGIA_RULE_IDX"; 

# Tabelle temporanee - specificando campi
create global temporary table 
  customer_temp_2(mag_ref number, num_carte varchar2(20), phone varchar2(25), old_phone varchar2(25))
on commit preserve rows;

# Tabelle temporanee - importando dati da altra tabella
create global temporary table customer_temp_3
  on commit preserve rows
  as select * from gcm_sirius_cliente where mail is not null;
  
# Multicolumn subquery
select cod_mov, prog_riga, prog_campo, ind_tipo_campo
from rc_ana_campi_riga_mov
where prog_campo = 12
--and ind_tipo_campo = 'O'
and (cod_mov, prog_riga) in (select cod_mov, prog_riga from rc_ana_campi_riga_mov where prog_campo = 9 and ind_tipo_campo = 'O')
order by cod_mov, prog_riga, prog_campo;
                   
# Describe table from another database
select * from all_tab_columns@RBPRD where table_name = 'T321_ANAPRO';

# Conditional constraint
CREATE TABLE OC_FILTRO_REFERENZA (
  reparto varchar2(5) not null enable,
  linea varchar2(5),
  categoria varchar2(5),
  constraint linea_categoria check ( (linea is null and categoria is null) or (linea is not null and categoria is null) or (linea is not null and categoria is not null) )
);

# Unique constraint on nullable fields
create unique index filtro_ref_unq on oc_filtro_referenza(
  case
    when linea is null then reparto
    when categoria is null then reparto || ',' || linea 
    else reparto || ',' || linea || ',' || categoria
  end
);

# Convert a VARCHAR2 type to CLOB
-- add a new column of CLOB type
alter table oc_jms_msg add ( new_messaggio CLOB );

-- Copy the data from the old column to the new one
update oc_jms_msg set new_messaggio = messaggio;
COMMIT;

-- Drop the old column
alter table oc_jms_msg drop column messaggio;

-- Rename the new column
alter table oc_jms_msg rename column new_messaggio to messaggio;

-- Show all dbs
select * from SYS.ALL_USERS; (as sysdba)

-- Dettagli sulle tabelle
select * from all_tables where table_name like '%VENDUTO%';

-- Estrarre anno da data
select extract(year from dat_vendita) "Anno", count(*) "No. di record"
from gcm_gnx_venduto
group by extract(year from dat_vendita)
order by 1 desc;

-- disabilitare tutti i vincoli di una tabella
for i in (select constraint_name, table_name from user_constraints where table_name = 'GCM_GNX_VENDUTO') LOOP
	execute immediate 'alter table '||i.table_name||' disable constraint '||i.constraint_name||'';
end loop;


## where con regex
SELECT SURNAME 
FROM SSO.USER_DATA  
WHERE REGEXP_LIKE(SURNAME, '^[a-zA-Zà-ü]+(([[:space:]\''\,\.\-][a-zA-Zà-ü])?[a-zA-Zà-ü]*)*[\'']{0,1}$')


## Ripulire una tabella troppo grande, per cui le DELETE sono poco performanti
1 - creare una tabella identica (ovviamente con nome diverso), utilizzando lo stesso DDL della tabella esistente

2 - abilitare l'esecuzione parallela
$ ALTER SESSION force parallel query parallel 8;
$ ALTER SESSION force parallel dml parallel 8;

3 - Inserire nella nuova tabella solamente i record di interesse della vecchia tabella, utilizzando la modalità append per evitare cache
$ INSERT /*+ append */ INTO GDPRUSR.GDPR_LOGS_BAK (LOG_DATE , LOG_LEVEL  , LOG_MSG, LOG_PROCEDURE)
SELECT LOG_DATE , LOG_LEVEL  , LOG_MSG, LOG_PROCEDURE FROM GDPRUSR.GDPR_LOGS gl WHERE LOG_DATE >= TO_DATE('01-01-2022', 'DD-MM-YYYY') ;

4 - committare
$ COMMIT;


5 - svuotare la tabella vecchia ed eliminarla
TRUNCATE TABLE GDPR_LOGS_BCSS;
DROP TABLE GDPR_LOGS_BCSS PURGE;

## Cancellazione bulk
1 - rimuovere eventuali indici sulla tabella

2 - abilitare l'esecuzione parallela
$ ALTER SESSION force parallel query parallel 8;
$ ALTER SESSION force parallel dml parallel 8;

3 - eseguire la cancellazione in modo parallelo
DELETE /*+ PARALLEL(GDPR_LOGS) */
FROM GDPR_LOGS gl 
WHERE LOG_DATE >= TO_DATE('01/02/2022', 'dd/MM/YYYY') 
  AND LOG_DATE < TO_DATE('10/02/2022', 'dd/MM/YYYY');

4 - committare
$ COMMIT;

5 - ricreare gli indici eliminati al punto 1



