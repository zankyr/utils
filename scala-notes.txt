
install scala (with IDE, https://www.scala-lang.org/)

install winutils (only on windows, https://github.com/steveloughran/winutils)
|- copy it in a path similar to <base_dir>\hadoop\bin
|- edit system enviroment variables adding HADOOP_HOME = <base_dir>\hadoop
|- in system enviroment variables edit PATH adding %HADOOP_HOME%\bin
|- check if correct by opening a cmd end running the command 'winutils.exe'




sbt package


Scala reflection
// Invocando un metodo senza param funziona
Class.forName("com.gft.bigdata.spark.reply.AppSegMarginePE").getMethod("test").invoke(null)

// Metodo con parametro "secco" (classe) funziona
Class.forName("com.gft.bigdata.spark.reply.AppSegMarginePE").getMethod("test", classOf[String]).invoke(null, "test") // scala
Class.forName("com.gft.bigdata.spark.reply.AppSegMarginePE").getMethod("test", String.class).invoke(null, "test") // java


val classeDaEseguire = "com.gft.bigdata.spark.reply.AppSegMarginePE"
val metodoDaEseguire = "main"


Class.forName(classeDaEseguire).getMethod(metodoDaEseguire, classOf[Array[String]]).invoke(null, args)

# Dichiarare una variabile modificabile (var) con _ equivale ad inizializzarla con il valore di default del tipo presceltox
var a: Int = _ // a = 0
var a: Double = _ // a = 0.0
var a: String = _ // a = null

scala diff class/object/trait

class: simile al concetto di classe di altri linguaggi ad oggetti (java)
object: singleton
trait: simile a interfacce (sorta di contratto)
package object:  is a placeholder where you can store and expose globally scoped objects and functions such as implicit conversion.
case class
companions

sbt
simple build tool oppure scala build tool

GROUPID % ARTIFACTID_SCALAVERSION % VERSION
e.g. com.typesafe.scala-logging % scala-logging_2.11 % 3.4.0

GROUPID %% ARTIFACTID % VERSION <== %% indica di scaricare la versione associata alla versione di scala specificata nel nostro progetto
e.g. com.typesafe.scala-logging %% scala-logging % 3.4.0


scala punta molto sul concetto di immutabilità (immutable pattern)

# definizione di variabili
val : variabile immutabile, una volta inizializzata non può cambiare valore
val <name>: <type> = <something>

var : variabile mutabile
var <name>: <type> = <somethint>
!! seguendo l'immutable pattern, l'uso dei var è sconsigliato


! il tipo non è obbligatorio, verrà "inferito" dal compilatore

lazy permette di posticipare l'inizializzazione di una variabile fino al suo effettivo utilizzo
lazy val i = 5

Unit == void

# Dichiarare una variabile senza inizializzarla: si utilizza la wildcard '_'
var i: String = _

## Interpolazione stringhe
tre modalità
s - allows the usage of variables directly in the string
f - allows the creation of simple formatted strings, similar to printf in other languages
raw - similar to the s interpolator except that it performs no escaping of literals within the string


è possibile costruire stringhe tramite interpolazione fra stringhe e altri 'oggetti'
la stringa viene prefissa con il carattere 's', al suo interno è possibile richiamare direttamente una variabile (o metodi) prefissandola con il carattere '$'

val favoriteDonut: String = "Glazed Donut"
println(s"My favorite donut = $favoriteDonut") // per stampare una variabile è sufficiente prefissarla con il carattere '$'

println(s"stringa di esempio = ${oggetto.proprietà}") // se si vuole stampare una proprietà/campo di un oggetto, è necessario includerlo fra ${...}

è anche possibile valutare espressioni
println(s"are we buying 10 donuts? ${qtyDonutsToBuy == 10}")

il prefisso f permette di formattare la stringa...
println(f"$donutName%20s $donutTasteLevel") // %20s Aggiunge 20 spazi prima della variabile a cui è associata

... o numeri
println(f"$price%.2f) // prezzo verrà mostrato con due cifre decimali ed il separatore configurato a sistema


# Escape di stringhe
utilizzare il carattere \ (\") oppure """ ("""stringa""") // Viene creata una stringa "raw", quindi tutti i caratteri contentuti non vengono valutati (\n verrà stampato, non manderà a capo)

# Indentare stringhe
val donutJson4: String =
    """
      |{
      |"donut_name":"Glazed Donut",
      |"taste_level":"Very Tasty",
      |"price":2.50
      |}
    """
      .stripMargin
	  
val donutJson5: String =
  """
      #{
      #"donut_name":"Glazed Donut",
      #"taste_level":"Very Tasty",
      #"price":2.50
      #}
    """
    .stripMargin('#')
	
no punto virgola

non esiste operatore ternario => if/else può essere utilzzato per valorizzare le variabili
val i = if(true) 10 else 11


# loop
for(i <- 1 to 5) ... (da uno a cinque inclusi)
for(i <- 1 until 5) ... (da uno incluso a cinque escluso)

// for each
val donutIngredients = List("flour", "sugar", "egg yolks", "syrup", "flavouring")
for(ingredient <- donutIngredients) println(ingredient)

// for each con condizione (guard)
for(ingredient <- donutIngredients if ingredient == "sugar") println(s"Found sweetening ingredient = $ingredient")
for(ingredient <- donutIngredients if (ingredient == "sugar" || ingredient == "flour")) println(s"Found sweetening ingredient = $ingredient")

// yield (Using a for loop with a yield statement is known as a for-comprehension. )
For each iteration of your for loop, yield generates a value which will be remembered. It's like the for loop has a buffer you can’t see, and for each iteration of your for loop another item is added to that buffer. When your for loop finishes running, it will return this collection of all the yielded values. The type of the collection that is returned is the same type that you were iterating over, so a Map yields a Map, a List yields a List, and so on.
Also, note that the initial collection is not changed; the for/yield construct creates a new collection according to the algorithm you specify.
When it begins running, the for/yield loop immediately creates a new, empty collection that is of the same type as the input collection. For example, if the input type is a Vector, the output type will also be a Vector. You can think of this new collection as being like a bucket.
On each iteration of the for loop, a new output element is created from the current element of the input collection. When the output element is created, it’s placed in the bucket.
When the loop finishes running, the entire contents of the bucket are returned.


// scalaFiles conterrà solo i file il cui nome termina con .scala
def scalaFiles = 
    for {
        file <- filesHere
        if file.getName.endsWith(".scala")
    } yield file
	
è anche possibile applicare codice nello yield
scala> val lengths = for (e <- names) yield {
     |     // imagine that this required multiple lines of code
     |     e.length
     | }
lengths: Array[Int] = Array(5, 2, 7)


## Pattern matching
simile a switch, ma molto più potente
val donutType = "Glazed Donut"
val tasteLevel = donutType match {
  case "Glazed Donut" | "Strawberry Donut" => "Very tasty" // è possibile raggruggare più operatori nello stesso case
  case donut if (donut.contains("Glazed") || donut.contains("Strawberry")) => "Very tasty" // è possibile usare if
  case "Plain Donut" => "Tasty"
  case _ => "Tasty" // caso default
}

case _ => None // best practice? (se non si vuole associare alcun comportamento al caso default è buona norma metterlo comunque?

non esiste break, il compilatore è in grado di evitare il fall-through nei casi successivi
anche il pattern matching può essere utilizzato per inizializzare variabili
val tasteLevel = donutType match {
  case "Glazed Donut" => "Very tasty"
  case "Plain Donut" => "Tasty"
}

è possibile matchare anche per il tipo della variabile
val priceOfDonut: Any = 2.50
val priceType = priceOfDonut match {
  case price: Int => "Int"
  case price: Double => "Double"
  case price: Float => "Float"
  case price: String => "String"
  case price: Boolean => "Boolean"
  case price: Char => "Char"
  case price: Long => "Long"
}

in scala non esite la keyword return, Instead, the last expression will be the one returned back to the caller. We will see more return types as we get to tutorials on functions.


Any == Java.Object



## Tuple
permettono di salvare coppie di oggetti
val glazedDonutTuple = Tuple2("Glazed Donut", "Very Tasty")

si accede agli elementi di una tupla tramite gli operatori _1 e _2
val donutType = glazedDonutTuple._1
val donutTasteLevel = glazedDonutTuple._2

le tuple vanno da Tuple2 fino a Tuple22

val donutList = List(glazedDonut, strawberryDonut, plainDonut)
val priceOfPlainDonut = donutList.foreach { tuple => {
  tuple match {
    case ("Plain Donut", taste, price) => println(s"Donut type = Plain Donut, price = $price") // matcha la tupla il cui primo campo è "Plain Donut", salva i campi 2 e 3 nelle variabili taste e price, per poterle riutilzzare dopo
    case d if d._1 == "Glazed Donut" => println(s"Donut type = ${d._1}, price = ${d._3}") // matcha la tupla il cui primo campo è "Glazed Donut". Sono stili diversi di fare la stessa cosa (vedi il case precedente)
    case _ => None
    }
  }
}

le tuple possono anche essere create omettendo TupleN, na semplicemende racchiudendo i campi fra parentesi
val chocolateDonut = ("Chocolate Donut", "Very Tasty", 3.0)


## Option
Permette di definire un "intento", ovvero che la variabile potrebbe non essere valorizzata, in modo da evitare (si spera) NPE
val glazedDonutTaste: Option[String] = Some("Very tasty")
val glazedDonutName: Option[String] = None

glazedDonutTaste.get // recupera il valore dell'optional, ma espone a NPE
glazedDonutName.getOrElse("Glazed donut") // Evita NPE ma non è molto elegante

// Si può usare pattern match per valutare gli optional...
glazedDonutName match {
    case Some(name) => println(s"Received donut name = $name")
    case None       => println(s"No donut name was found!")
  }
 
// ... oppure la funzione map
glazedDonutTaste.map(taste => println(s"glazedDonutTaste = $taste"))
glazedDonutName.map(name => println(s"glazedDonutName = $name")) // essendo il nome vuoto, questa variabile non verrà stampata


# Tipi di classi
http://allaboutscala.com/wp-content/uploads/2016/06/scala-unified-types.jpg

# Enumeration
object Donut extends Enumeration {
    type Donut = Value

    val Glazed = Value("Glazed")
    val Strawberry = Value("Strawberry")
    val Plain = Value("Plain")
    val Vanilla = Value("Vanilla")
  }
  
Donut.Vanilla
Donut.Vanilla.id
Donut.values // tutti i valori

// cambiare ordine naturale
object DonutTaste extends Enumeration {
  type DonutTaste = Value

  val Tasty = Value(0, "Tasty")
  val VeryTasty = Value(1, "Very Tasty")
  val Ok = Value(-1, "Ok")
}


enumeratio vs sealed trait (https://underscore.io/blog/posts/2014/09/03/enumerations.html)
https://alvinalexander.com/scala/how-to-use-scala-enums-enumeration-examples



# ScalaTest
> Come testare metodi privati
import org.scalatest.PrivateMethodTester._
...
val createQueryForMasterTable = PrivateMethod[String]('createQueryForMasterTable) // tra [] va messo il tipo ritornato dal metodo da testare, fra () il nome del metodo privato da testare (attenziona al carattere ', è uno solo, si tratta di un symbol literal)
...
val query: String = JobFase1 invokePrivate createQueryForMasterTable(emptyArgs) // invocazione del metodo con relativi parametri (se nessun parametro, usare ())

> check if two dataframes are equals
pdvToCheckDF.collect should contain theSameElementsAs pdvFromMasterDF.collect
OR
pdvToCheckDF.except(pdvFromMasterDF).count() shouldEqual 0


# 